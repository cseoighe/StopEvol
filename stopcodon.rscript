#!/usr/bin/env Rscript

## Usage: Rscript stopcodon.rscript <treefile.ph> <seqfile.fasta>
## The tree file should include branch lengths. Note that relative branch lengths are treated as fixed.
## The sequence file should contain a codon-aware alignment in fasta format and must include the 
## stop codon as the last position of the alignment. Sequences that include a gap or a codon other than
## a stop codon (i.e. sequences for which the stop codon is not positionally homologous with the last 
## position in the alignment) are excluded.
## Output: a file called stopcodon.rscript.out, which contains the following: The maximum log likelihood;
## ML estimate of kappa; ML estimate of omega; ML estimate of the treescaling parameter; ML estimate of phi
## delta_lnL (difference in log likelihood compared to a model with phi=1; convergence of optimizer (0 = success,
## 1 = failure)

args = commandArgs(trailingOnly=TRUE)

model = 'MG'
codon_frequencies_model = 'f1x4'

#####Requires ape and expm
require(ape)
require(expm)

tree_file = args[1]
seq_file = args[2]
out_file = paste(seq_file,".stopout",sep="")

######Setup########
setup = function(omega,phi,kappa,treefile, seqfile) {
  amino_acids = c("F", "L", "S", "Y", "C", "W", "P", "H", "Q", "R", "I", "M", "T", "K", "N", "V", "A", "D", "E", "G","X")
  codons = c("ttt", "ttc", "tta", "ttg", "tct", "tcc", "tca", "tcg", "tat", "tac", "tgt", "tgc", "tgg", "ctt", "ctc", "cta", "ctg", "cct", "ccc", "cca", "ccg", "cat", "cac","caa", "cag", "cgt", "cgc", "cga", "cgg", "att", "atc", "ata", "atg", "act", "acc", "aca", "acg", "aat", "aac","aaa", "aag", "agt", "agc", "aga", "agg", "gtt", "gtc","gta", "gtg", "gct", "gcc", "gca", "gcg", "gat", "gac","gaa", "gag", "ggt", "ggc", "gga", "ggg", "tag", "tga","taa")
  aa = c("F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y","C", "C", "W", "L", "L", "L", "L", "P", "P", "P", "P","H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I", "I","M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S","R", "R", "V", "V", "V", "V", "A", "A", "A", "A", "D","D", "E", "E", "G", "G", "G", "G", "X", "X", "X")
  codon_numbers = list(ttt = 1, ttc = 2, tta = 3, ttg = 4,tct = 5, tcc = 6, tca = 7, tcg = 8, tat = 9, tac = 10,tgt = 11, tgc = 12, tgg = 13, ctt = 14, ctc = 15, cta = 16,ctg = 17, cct = 18, ccc = 19, cca = 20, ccg = 21, cat = 22,cac = 23, caa = 24, cag = 25, cgt = 26, cgc = 27, cga = 28,cgg = 29, att = 30, atc = 31, ata = 32, atg = 33, act = 34,acc = 35, aca = 36, acg = 37, aat = 38, aac = 39, aaa = 40,aag = 41, agt = 42, agc = 43, aga = 44, agg = 45, gtt = 46,gtc = 47, gta = 48, gtg = 49, gct = 50, gcc = 51, gca = 52,gcg = 53, gat = 54, gac = 55, gaa = 56, gag = 57, ggt = 58,ggc = 59, gga = 60, ggg = 61, tag = 62, tga = 63, taa = 64)
  nucleotides = list(a = 1, c = 2, g = 3, t = 4)
  purine = c(1, 0, 1, 0)
  
  tree = read.tree(tree_file)
  tree=reorder(tree,"postorder")
  edges = tree$edge
  
  seqs = read.dna(seq_file,fo="fasta")
  chars = as.character(seqs)
  chars = chars[tree$tip.label,]
  
  #set up PI
  f1 = c(0, 0, 0, 0)
  f2 = c(0, 0, 0, 0)
  f3 = c(0, 0, 0, 0)
  ff = c(0,0,0,0)
  PI = array(rep(0, 64*64), dim = c(64, 64))
  PI3x4 = array(rep(0, 64*64), dim = c(64, 64))
  PI1x4 = array(rep(0, 64*64), dim = c(64, 64))
  
  #convert to codons - produces cdAlign which is a matrix representing the coding sequence alignment. Each
  #row is a sequence, each column is a numeric representation (1-64) of the codon
  cdAlign = array(rep(0,nrow(chars)*ncol(chars)/3),c(nrow(chars),ncol(chars)/3))
  for(i in 1:nrow(chars)) {
    s = paste(chars[i,],collapse="")
    for(j in 1:(ncol(chars)/3)) {
      ss = substr(s,3*(j-1)+1,3*j)
      if(!is.null(codon_numbers[[ss]])) {
        cdAlign[i,j] = codon_numbers[[ss]]
        f1[nucleotides[[substr(ss,1,1)]]] = f1[nucleotides[[substr(ss,1,1)]]] + 1
        f2[nucleotides[[substr(ss,2,2)]]] = f2[nucleotides[[substr(ss,2,2)]]] + 1
        f3[nucleotides[[substr(ss,3,3)]]] = f3[nucleotides[[substr(ss,3,3)]]] + 1
	ff[nucleotides[[substr(ss,1,1)]]] = ff[nucleotides[[substr(ss,1,1)]]] + 1
	ff[nucleotides[[substr(ss,2,2)]]] = ff[nucleotides[[substr(ss,2,2)]]] + 1
	ff[nucleotides[[substr(ss,3,3)]]] = ff[nucleotides[[substr(ss,3,3)]]] + 1
      }
      else {
        cdAlign[i,j] = NA
      }
    }
  }
  dimnames(cdAlign)[[1]]=tree$tip.label
f1 = f1/sum(f1)
f2 = f2/sum(f2)
f3 = f3/sum(f3)
ff = ff/sum(ff)
  
  for (i in 1:64) {
    PI3x4[i, i] = f1[nucleotides[[substr(codons[i], 1, 1)]]] * f2[nucleotides[[substr(codons[i],2, 2)]]]* f3[nucleotides[[substr(codons[i],3, 3)]]]
    PI1x4[i, i] = ff[nucleotides[[substr(codons[i], 1, 1)]]] * ff[nucleotides[[substr(codons[i],2, 2)]]]* ff[nucleotides[[substr(codons[i],3, 3)]]]
  }

# Toggle f3x4 f1x4
  #PI = PI3x4/sum(PI3x4)
  PI = PI1x4/sum(PI1x4)

Mg_mult = array(c(rep(0, 4096)), dim = c(64, 64))
  
###############Set up the generator matrix############
  R = array(c(rep(0, 4096)), dim = c(64, 64))
  for (i in 1:64) {
    for (j in 1:64) {
      diffs = 0
      for (k in 1:3) {
        nuc1 = nucleotides[[substr(codons[i], k, k)]]
        nuc2 = nucleotides[[substr(codons[j], k, k)]]
        if (nuc1 != nuc2) {
          diffs = diffs + 1
		if(codon_frequencies_model == 'f1x4') {
                Mg_mult[i,j] = ff[nuc2]
                } else if(codon_frequencies_model == 'f3x4') {
                if(k==1) {Mg_mult[i,j] = f1[nuc2]}
                if(k==2) {Mg_mult[i,j] = f2[nuc2]}
                if(k==3) {Mg_mult[i,j] = f3[nuc2]}
                } else {print("Codon frequencies model undefined")
                return(NA)
                }
          if (purine[nuc1] == purine[nuc2]) {
            R[i, j] = kappa
          }
          else {
            R[i,j] = 1
          }
          if (aa[i] != aa[j]) {
            R[i,j] = R[i,j] * omega 
         }
          if(i > 61 & j <= 61) { # stop to non stop
            R[i,j] = 0
          }
          if(i <= 61 & j > 61) { # non stop to stop
            R[i,j] = 0
          }
          if(i > 61 & j > 61 & i != j) {
            R[i,j] = phi * R[i,j]
          }
        }
      }
      if (diffs > 1) {
        R[i, j] = 0
      }
    }
  }


	if(model == 'MG') {
	R = R * Mg_mult
	} else if(model == 'GY') {
	R = R %*% PI
	} else {print("Model undefined")
	return(NA)
	}

#Scale the generator matrix
scale_fac = sum(PI%*%R)

R = (1/scale_fac)*R
  
  for(i in 1:64) {
    R[i,i] = -sum(R[i,-i])
  }

  return(list(edges=edges,tree=tree,R=R,cdAlign=cdAlign,PI=PI))
}

#####Felsenstein pruning algorithm
felsen=function(pos, tree, node, cdAlign, TPM) {
  edges = tree$edge
  prod = t(t(rep(1,64)))
  s = which(edges[,1] == node)
  for(k in s) {
      if(edges[k,2] <= length(tree$tip.label)){
        if(!is.null(dim(cdAlign))) {
          if(!is.na(cdAlign[tree$tip.label[edges[k,2]],pos])) {
          prod = prod * t(t(TPM[k,,cdAlign[tree$tip.label[edges[k,2]],pos]]))
          }
        }
        else {
          if(!is.na(cdAlign[tree$tip.label[edges[k,2]]])) {
          prod = prod * t(t(TPM[k,,cdAlign[tree$tip.label[edges[k,2]]]]))
          }
        }
      }
      else {
        prod = prod * TPM[k,,]%*%felsen(pos,tree,edges[k,2],cdAlign, TPM)
      }
  }
  return(prod)
}


########End of setup########

#Takes parameters: kappa, omega, treescale, phi
lik_fun = function(pars,treefile,seqfile, phifixed=0) {
kappa = pars[1]
omega = pars[2]
treescale = pars[3]
  if(phifixed==1) {
    phi = 1
  } else {
  phi = pars[4]
  }

  if(phi < 0 | omega < 0 | kappa < 0 | treescale < 0) {
    return(NA)
  }
  out = setup(omega,phi,kappa,treefile,seqfile)
  edges = out$edges
  tree = out$tree
  cdAlign = out$cdAlign
  R = out$R
  PI = out$PI
  TPM = array(rep(0,64*64*nrow(edges)),dim=c(nrow(edges),64,64))
  for(i in 1:nrow(edges)){
    TPM[i,,] = expm(treescale*tree$edge.length[i]*R)
  }
  likelihood = 0
  for(i in 1:ncol(cdAlign)) {
  likelihood = likelihood + log(sum(diag(PI)*felsen(i, tree, edges[nrow(edges),1], cdAlign,TPM)))
  }
  print(c(pars,likelihood))
  return(likelihood)
}

m0.out = optim(c(2,0.2,1),lik_fun,treefile=tree_file,seqfile=seq_file,phifixed=1,control=list(fnscale=-1))
print(m0.out)
m1.out = optim(c(2,0.2,1,1),lik_fun,treefile=tree_file,seqfile=seq_file,control=list(fnscale=-1))
print(m1.out)
diff = m1.out$value - m0.out$value
write(c(m1.out$value,m1.out$par,diff,m1.out$convergence),out_file,ncol=10)

